(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{370:function(t,e,a){"use strict";a.r(e);var r=a(25),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"mu-biao-jian-ce---rcnn-xi-lie-qian-tan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mu-biao-jian-ce---rcnn-xi-lie-qian-tan"}},[t._v("#")]),t._v(" 目标检测 - RCNN 系列浅谈")]),t._v(" "),a("h2",{attrs:{id:"fa-zhan-gui-ji"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fa-zhan-gui-ji"}},[t._v("#")]),t._v(" 发展轨迹")]),t._v(" "),a("center",{staticClass:"half"},[a("img",{staticStyle:{zoom:"30%"},attrs:{src:"https://github.com/hoya012/deep_learning_object_detection/raw/master/assets/deep_learning_object_detection_history.PNG"}}),a("img",{staticStyle:{zoom:"30%"},attrs:{src:"https://static001.infoq.cn/resource/image/ce/e7/ce6f12a5f579217e905851164d0fb4e7.jpg"}})]),t._v(" "),a("p",[t._v('目标检测，解决图片中物体"是什么"和"在哪里"的问题。2013 年 Ross Girshick 提出了 RCNN ，随后涌现出很多里程碑的目标检测网络（包括 20 年的 EfficientDet 和 Yolov4 ）。从网络设计思想说，目标检测网络可以分为 two-stage （i.e., RCNN, R-FCN）、one-stage（i.e., Yolo）、anchor-based、anchor-free（i.e., FCOS，CenterNet）。')]),t._v(" "),a("h2",{attrs:{id:"rcnn-she-ji-si-xiang"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rcnn-she-ji-si-xiang"}},[t._v("#")]),t._v(" RCNN 设计思想")]),t._v(" "),a("p",[t._v("双阶段检测，先进行区域生成，生成的区域称为 region proposal，表示该预选框里有可能存在待检测物体，再通过头部网络对预选框做分类和定位。")]),t._v(" "),a("p",[t._v("任务流程：图片特征提取 -》 生成 region proposal -》 分类/定位回归")]),t._v(" "),a("h3",{attrs:{id:"r-cnn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#r-cnn"}},[t._v("#")]),t._v(" R-CNN")]),t._v(" "),a("p",[t._v("全名 Regions with CNN Features，是 RCNN 系列的开山之作。结合深度学习和传统计算机视觉。使用 selective search （选择性搜索）提取 region proposal （候选区域），大概 2000 个，使用 SVM 实现分类。")]),t._v(" "),a("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://pic2.zhimg.com/80/v2-ec320f9a52d0d5630be4a8fc9ea93c61_1440w.jpg"}}),t._v(" "),a("p",[a("strong",[t._v("存在的不足")])]),t._v(" "),a("ul",[a("li",[t._v("selective search 耗时。计算子区域的相似性 （颜色、纹理、大小等），合并相似的子区域，迭代，一帧图片耗费 2 秒。")]),t._v(" "),a("li",[t._v("重复计算。对每个 region proposal 都要经过 CNN 作特征提取，计算完所有的 region 需要花费 47 秒。")]),t._v(" "),a("li",[t._v("模块非端到端训练。提取、分类、回归模块需要分别训练。")])]),t._v(" "),a("h3",{attrs:{id:"fast-r-cnn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fast-r-cnn"}},[t._v("#")]),t._v(" Fast R-CNN")]),t._v(" "),a("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://pic4.zhimg.com/80/v2-597bf75a922c054ca038fe4c2fc9655f_1440w.jpg"}}),t._v(" "),a("p",[a("strong",[t._v("特点")])]),t._v(" "),a("ul",[a("li",[t._v("加入 RoI Pooling ，采用一个神经网络对全图提取特征")]),t._v(" "),a("li",[t._v("但依旧采用 selective search")])]),t._v(" "),a("h3",{attrs:{id:"faster-r-cnn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#faster-r-cnn"}},[t._v("#")]),t._v(" Faster R-CNN")]),t._v(" "),a("p",[t._v("Ross 大佬 在 2016 年提出的新模型 ，在 Fast RCNN 基础上，将将特征提取、 region proposal 提取、预测框回归和分类整合到一个网络中，真正实现了端到端的目标检测模型。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic4.zhimg.com/80/v2-35ce8d4e9f9d2c8493f6ca2f894c508f_1440w.jpg"}}),t._v(" "),a("p",[a("strong",[t._v("整体流程")])]),t._v(" "),a("ul",[a("li",[t._v("使用 ConvNet （卷积 + 激活 + 池化）对整张图片作特征提取，生成的特征图用于之后的 RPN 和全连接层。")]),t._v(" "),a("li",[t._v("RPN （Region Proposal Networks）网络生成候选区域。为 RCNN 子网提供正样本 （前景，框内有物体）和负样本（背景，框内没有物体）。\n使用 RoI Pooling 归一候选区域的大小。使用非极大值抑制 NMS 消除高重合度的边框。")]),t._v(" "),a("li",[t._v("RCNN 网络，对 RPN 生成的候选区域作多标签分类和边框回归。")])]),t._v(" "),a("p",[a("strong",[t._v("anchor")]),t._v("\n锚点指的是预先设置好的一组检测框，为最后一层特征图的每个稠密网格生成 anchor。通过 anchor 引入多尺度方法，论文中设置了 3 种形状 3 中尺寸的锚，一组锚点有 9 个检测框。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://pic2.zhimg.com/80/v2-4b15828dfee19be726835b671748cc4d_1440w.jpg"}}),t._v(" "),a("p",[a("strong",[t._v("正负样本定义")]),t._v("\n通过计算 anchor 和 ground truth 的 IoU。论文中,与所有 ground truth 的 IoU 都小于 0.3 为负样本，与任一 ground truth 的 IoU 大于 0.7 为正样本。 正负样本比例 1：3。")]),t._v(" "),a("p",[a("strong",[t._v("损失函数")])]),t._v(" "),a("ul",[a("li",[t._v("RPN： 二分类（anchor box 里是否有物体） +  坐标回归")]),t._v(" "),a("li",[t._v("RCNN： 多分类 + 坐标回归")])]),t._v(" "),a("p",[t._v("最后用多任务学习将两个子网的损失联合起来。")]),t._v(" "),a("p",[t._v("$$\n\\mathcal{L} _\\text{RCNN} &= \\mathcal{L} _\\text{cls} + \\mathcal{L} _\\text{box}\n$$")]),t._v(" "),a("p",[t._v("$$\n\\mathcal{L}({p_i}, {t_i}) &= \\frac{1}{N_\\text{cls}} \\sum_i \\mathcal{L}_\\text{cls} (p_i, p^"),a("em",[t._v("_i) + \\frac{\\lambda}{N _\\text{box}} \\sum_i p^")]),t._v("_i \\cdot L_1^\\text{smooth}(t_i - t^*_i)\n$$")]),t._v(" "),a("p",[t._v("同理可得$\\mathcal{L} _\\text{RPN}$")]),t._v(" "),a("p",[t._v("最终$\\mathcal{L} &= \\mathcal{L} _\\text{RPN} + \\mathcal{L} _\\text{RCNN}$")]),t._v(" "),a("p",[a("strong",[t._v("特点")])]),t._v(" "),a("ul",[a("li",[t._v("实现特征共享。RPN 和分类器共享一套特征图。")]),t._v(" "),a("li",[t._v("模型性能很大程度依赖 anchor 的参数，参数的预先设置比较困难。")]),t._v(" "),a("li",[t._v("双阶段设计准确率较高，但运算速度慢。所以后来 Ross 大佬提出了以 yolo 为代表的 one-stage 检测网络，将 RPN 和分类器两个子网合并在一起。one-stage 发展至今实现实时推理，并且精度不亚于双阶段检测器。")])]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://img-blog.csdnimg.cn/20201120192837724.png#pic_center"}}),t._v(" "),a("h2",{attrs:{id:"yi-xie-gai-jin-wang-luo-de-xiao-ji-qiao"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yi-xie-gai-jin-wang-luo-de-xiao-ji-qiao"}},[t._v("#")]),t._v(" 一些改进网络的小技巧")]),t._v(" "),a("h3",{attrs:{id:"fpn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fpn"}},[t._v("#")]),t._v(" FPN")]),t._v(" "),a("p",[t._v("FPN （Feature Pyramid Network）本身是一个特征提取器，对目标检测器的性能有较大的提升，尤其是检测小物体的能力。网络包含两部：第一部分是自底向上的过程，第二部分是自顶向下和侧向链接。")]),t._v(" "),a("p",[a("strong",[t._v("自底向上")]),t._v("\n与普通 CNN 相似，每一个卷积块对应特征金字塔的一个 level ，每个卷积块最后一层特征作为 FPN 相应 level 的特征。以 ResNet 为例，这几个特征层相对于原图的步长分别为 4、8、16、32。")]),t._v(" "),a("p",[a("strong",[t._v("自顶向下和侧向链接")]),t._v("\n自顶向下通过上采样的方式将特征图放大，和上一层特征图尺寸一致。对上一层特征图作 1 x 1 卷积，修正通道数。")]),t._v(" "),a("p",[t._v("侧向链接对两层特征图作 pixel-wise 加法，利用了深度卷积网络各个层次特征，保留了高层的语义特征（利于分类）和底层的高分辨率信息（利于定位）。")]),t._v(" "),a("img",{staticStyle:{zoom:"60%"},attrs:{src:"http://www.tensorinfinity.com/upload/mdfiles/20190325041713_36264.jpg"}}),t._v(" "),a("p",[a("strong",[t._v("FPN 上的一些改进")])]),t._v(" "),a("ul",[a("li",[t._v("PANet 先自底向上连，再自顶向下连回去")]),t._v(" "),a("li",[t._v("NAS-FPN 使用强化学习方法，将任意两个输入特征层融合到一个输出特征层中")]),t._v(" "),a("li",[t._v("2020 年屠榜的 EfficientDet 提出了 BiFPN 结构，在 PAnet 的基础上删除了一些链接")])]),t._v(" "),a("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://pic4.zhimg.com/80/v2-225cc89e2308de82aa2267a9a944762f_1440w.jpg"}}),t._v(" "),a("h3",{attrs:{id:"focal-loss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#focal-loss"}},[t._v("#")]),t._v(" Focal Loss")]),t._v(" "),a("p",[t._v("RetinaNet 提出的损失函数，为单阶段检测器设计，解决背景/前景样本不平衡的问题，现在也应用在其他类别不均衡的任务中。")]),t._v(" "),a("p",[t._v("在交叉熵的基础上添加惩罚系数，使预测概率越低（也就是越难预测）的样本，计算损失的时候所占比例越大。")]),t._v(" "),a("p",[t._v("::: 代码实现\nfocal loss 代码实现可见 "),a("a",{attrs:{href:"https://code.devops.xiaohongshu.com/ut/ut-caesar-server/-/blob/release/ut-caesar/utils/loss_utils.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("ut-caesar-codebase"),a("OutboundLink")],1),t._v("\n:::")]),t._v(" "),a("h2",{attrs:{id:"yi-xie-ji-yu-rcnn-de-yan-sheng"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yi-xie-ji-yu-rcnn-de-yan-sheng"}},[t._v("#")]),t._v(" 一些基于 RCNN 的衍生")]),t._v(" "),a("h3",{attrs:{id:"r-c3d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#r-c3d"}},[t._v("#")]),t._v(" R-C3D")]),t._v(" "),a("p",[t._v("将目标检测思想运用到视频分段的任务中，使用 3D 卷积作为提取时序特征的 backbone，使用 3D RoI Pooling 归一时序特征。")]),t._v(" "),a("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://img-blog.csdnimg.cn/20200706095625749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RsNjQzMDUz,size_16,color_FFFFFF,t_70"}}),t._v(" "),a("h2",{attrs:{id:"ru-he-ping-gu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ru-he-ping-gu"}},[t._v("#")]),t._v(" 如何评估")]),t._v(" "),a("h3",{attrs:{id:"iou-intersection-over-union"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iou-intersection-over-union"}},[t._v("#")]),t._v(" IoU (Intersection over Union)")]),t._v(" "),a("h3",{attrs:{id:"ap-average-precision"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ap-average-precision"}},[t._v("#")]),t._v(" AP (Average Precision）")]),t._v(" "),a("ul",[a("li",[t._v("对单个类别来说，通过预测框和 ground truth 的 IoU ，判断预测框为 TP 还是 FP。")]),t._v(" "),a("li",[t._v("通过调整置信度的阈值，只考虑置信度大于阈值的检测框。对于不同的阈值，我们得到多组 precision 和 recall 值，绘制 PR 曲线。")]),t._v(" "),a("li",[t._v("每个“峰值点”往左画一条线段直到与上一个峰值点的垂直线相交。这样画出来的红色线段与坐标轴围起来的曲线下面积就是这个类别的 AP 值。")])]),t._v(" "),a("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://user-images.githubusercontent.com/15831541/43008995-64dd53ce-8c34-11e8-8a2c-4567b1311910.png"}}),t._v(" "),a("h3",{attrs:{id:"map-mean-average-precision"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-mean-average-precision"}},[t._v("#")]),t._v(" mAP (mean Average Precision）")]),t._v(" "),a("ul",[a("li",[t._v("AP 衡量的是单个类别的检测好坏，mAP 就是把所有类别的 AP 取均值。 mAP 是衡量检测器在所有类别上性能的重要指标。")])]),t._v(" "),a("h3",{attrs:{id:"yun-suan-li-zhi-biao"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yun-suan-li-zhi-biao"}},[t._v("#")]),t._v(" 运算力指标")]),t._v(" "),a("ul",[a("li",[t._v("FLOPs： floating point operations , 浮点数运算，指计算量，越小越好。")]),t._v(" "),a("li",[t._v("FPS：frams per second， 每秒处理帧数，评价执行速度，越大越好")])]),t._v(" "),a("h2",{attrs:{id:"sota-dai-ma-ku"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sota-dai-ma-ku"}},[t._v("#")]),t._v(" SOTA 代码库")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://www.paperswithcode.com/sota/object-detection-on-coco",target:"_blank",rel:"noopener noreferrer"}},[t._v("Papers with Code"),a("OutboundLink")],1),t._v(" 提供了目标检测领域上的论文和公开代码链接，及其在各大 benchmark 的排名。模型性能一目了然。截止至 2021 年 2 月，在 COCO test-dev 上， yolov4 和 efficientdet 占据榜单前列的多个席位。")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://github.com/facebookresearch/detectron2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Detectron2"),a("OutboundLink")],1),t._v(" 由 FAIR 开源，基于 pytorch。 他的前身 Detectron 是基于 caffe 的第一个比较全面的目标检测工具箱。Detectron2 不仅支持目标检测，还包括实例/语义分割、姿态识别等任务。")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://github.com/open-mmlab/mmdetection",target:"_blank",rel:"noopener noreferrer"}},[t._v("mmDetection"),a("OutboundLink")],1),t._v(" 由商汤和港中文开源，基于 pytorch ，是目前开源检测框架中包含论文数最多的工具箱。作者声称相较于 Detectron2 优点在于性能稍高、训练速度稍快、所需显存稍小。")])])])],1)}),[],!1,null,null,null);e.default=s.exports}}]);